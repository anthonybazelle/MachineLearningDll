float TestMultiply(float a, float b);
float TestDivide(float a, float b);
float* LinearRegression(float* xCollection, float* yCollection, int dataSize);
float* LinearRegressionWithEigen(float* inputs, float* zBuffer, const int nbParameter, const int nbSample);
float* TestRefArrayOfInts(int** ppArray, int* pSize);  
float* PerceptronRosenblatt(float* inputs, float* expected, float* weights, int nbParameters, int nbSample, float stepLearning, int nbIteration, float tolerance);
float* PLA(float* inputs, float* expected, float* weights, int nbParameters, int nbSample, float stepLearning, int nbIteration, float tolerance);
float* RBFNaiveTraining(float gamma, float* inputs, float* expected, int nbParameters, int nbSamples, int nbOutputs);
float* RBFRegression(float gamma, float* inputs, float* data, float* weights, int nbParameters, int nbSamples, int nbOutputs);
float* RBFClassification(float gamma, float* inputs, float* data, float* weights, int nbParameters, int nbSamples, int nbOutputs);
float* RBFkMeansTraining(float epsilon, int cluster, float gamma, float* inputs, float* expected, int nbParameters, int nbSamples, int nbOutputs);
int InitNeuralNetwork(float initWeight, int* weightsPerLayerArray, int nbLayer, int activateFunc, float biasValue);
float* LearnMLP(int nbSample, float* inputs, const int nbInputParam, float* output, const int nbOutputParam, int nbIteration);